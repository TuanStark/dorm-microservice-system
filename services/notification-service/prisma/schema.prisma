// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NotificationPreferences {
  id        String   @id @default(uuid())
  userId    String   @unique
  
  // Channel preferences
  emailEnabled    Boolean @default(true)
  smsEnabled      Boolean @default(false)
  pushEnabled     Boolean @default(true)
  
  // Notification types
  bookingNotifications    Boolean @default(true)
  paymentNotifications    Boolean @default(true)
  roomNotifications       Boolean @default(true)
  systemNotifications     Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notification_preferences")
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  // Notification details
  type        NotificationType
  title       String
  content     String
  data        Json?    // Additional data (bookingId, paymentId, etc.)
  
  // Delivery status
  status      NotificationStatus @default(PENDING)
  channels    NotificationChannel[]
  
  // Timestamps
  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("notifications")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model NotificationChannel {
  id             String   @id @default(uuid())
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  channel        ChannelType
  status         ChannelStatus @default(PENDING)
  
  // Delivery details
  recipient      String   // email, phone, device token
  subject        String?  // for email
  templateId     String?
  
  // Delivery tracking
  sentAt         DateTime?
  deliveredAt    DateTime?
  failedAt       DateTime?
  errorMessage   String?
  retryCount     Int      @default(0)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("notification_channels")
  @@index([notificationId])
  @@index([status])
}

model NotificationTemplate {
  id        String   @id @default(uuid())
  type      NotificationType
  channel   ChannelType
  
  // Template content
  subject   String?
  content   String
  variables Json     // Template variables
  
  // Status
  active    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notification_templates")
  @@unique([type, channel])
}

// Enums
enum NotificationType {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  BOOKING_CANCELED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  ROOM_DELETED
  ROOM_UPDATED
  SYSTEM_MAINTENANCE
  WELCOME
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum ChannelType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum ChannelStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  RETRYING
}
